<!--
  Copyright 2010 Prometheus Consulting
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
    http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
	DO NOT EDIT THIS FILE
	It is injected into the project from outside and needs to be kept standard.
	If you need to re-implement anything in here put it into build.xml, renaming the target etc.
-->
<project xmlns:ivy="urn:ivy-ant">

	<property name="package.dir" value="${basedir}/package" />
	<property name="ivy.install.version" value="2.1.0" />
	<property name="ivy.resolve" value="${basedir}/ivy.xml" />
	<property name="ivy.jar.dir" value="${basedir}/ivy" />
	<property name="ivy.settings" value="file://${basedir}/ivysettings.xml"/>
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
	<basename property="project.name" file="${basedir}"/>

	<property name="dist.remote" value="false"/>
	<condition property="dist.url" value="file://${basedir}/package">
		<isfalse value="${dist.remote}"/>
	</condition>
	<condition property="dist.url" value="http://${ant.project.name}.googlecode.com/files">
		<istrue value="${dist.remote}"/>
	</condition>

	<property name="suppress.retrieve-dependencies" value="false"/>
	<condition property="suppress.retrieve-dependencies-true" value="true">
		<istrue value="${suppress.retrieve-dependencies}"/>
	</condition>

	<condition property="ivy.already.downloaded">
		<or>
	      <available file="${ivy.jar.dir}/ivy-${ivy.install.version}.jar"/>
	      <available resource="org/apache/ivy/ant/antlib.xml"/>
		</or>
	</condition>

	<property name="buildproperties" value="${ant.project.name}.properties"/>
	<property name="javadoc.dir" value="${basedir}/javadoc"/>
	<tstamp>
		<format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
	</tstamp>
	<tstamp>
		<format property="year" pattern="yyyy" />
	</tstamp>

	<target name="download-ivy" unless="${ivy.already.downloaded}">
		<mkdir dir="${ivy.jar.dir}"/>
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.dir}/ivy-${ivy.install.version}.jar" usetimestamp="true" />
		<echo>ivy download complete.</echo>
	</target>
	
	<target name="init-ivy" depends="download-ivy">
		<typedef resource="org/apache/ivy/ant/antlib.xml" uri="urn:ivy-ant">
			<classpath>
				<fileset dir="${ivy.jar.dir}" includes="*.jar"/>
		    </classpath>
		 </typedef>
		<ivy:settings url="${ivy.settings}"/>
		<ivy:resolve file="${ivy.resolve}"/>
	</target>

	<macrodef name="manifest-macro">
		<attribute name="manifest.file" default="MANIFEST.MF"/>
		<attribute name="buildproperties" default="${buildproperties}"/>
		<attribute name="build.version" default="${build.version}"/>
	<sequential>
		<manifest file="@{manifest.file}">
			<attribute name="Built-By" value="${user.name}"/>
			<attribute name="Implementation-Version" 
				value="${build.version}"/>   
			<attribute name="Implementation-Title" 
				value="${project.name}"/>   
			<attribute name="Implementation-Vendor" 
				value="${build.company}"/>   
  			<attribute name="Built-Date" value="${TODAY}"/>                 
		</manifest>
	</sequential>
	</macrodef>

	<macrodef name="updatebuild-macro">
		<attribute name="buildproperties" default="${buildproperties}"/>
		<attribute name="build.version" default="${build.version}"/>
	<sequential>
		<propertyfile
		    file="@{buildproperties}"
		    comment="Build properties">
		  <entry  key="build.number" type="int" default="0050" operation="+" pattern="0000"/>
		  <entry  key="build.date" type="date" value="now" pattern="dd MMM yyyy HH:mm"/>
		  <entry  key="build.version" type="string" value="@{build.version}"/>
		</propertyfile>
	</sequential>
	</macrodef>

	<macrodef name="javadoc-macro">
		<attribute name="target.dir" default="${javadoc.dir}"/>
		<attribute name="build.version" default="${build.version}"/>
	<sequential>
		<delete dir="@{target.dir}" failonerror="false"/>
		<mkdir dir="@{target.dir}"/>
		<javadoc packagenames="nz.co.senanque.*"
					classpathref="libs"
		           sourcepath="${srcpath}"
		           defaultexcludes="yes"
		           destdir="@{target.dir}"
		           author="true"
		           version="true"
		           use="true"
		           windowtitle="${project.name}">
			<bottom><![CDATA[<i>Copyright &#169; ${year} ${build.company}. All Rights Reserved.</i>]]></bottom>
		  </javadoc>
		<zip destfile="${ant.project.name}-javadocs.zip" basedir="@{target.dir}"/>
	</sequential>
	</macrodef>
	
	<macrodef name="ivyroundup-macro">
		<attribute name="target.dir" default="${package.dir}"/>
		<attribute name="project.name" default="${ant.project.name}"/>
		<attribute name="build.version" default="${build.version}"/>
	<sequential>
		<echo>ivyroundup-macro</echo>
		<delete dir="@{target.dir}" failonerror="false"/>
		<mkdir dir="@{target.dir}"/>
		<copy tofile="@{target.dir}/@{project.name}-javadocs-@{build.version}.zip" file="@{project.name}-javadocs.zip"/>
		<copy tofile="@{target.dir}/@{project.name}-source-@{build.version}.zip" file="@{project.name}-source.zip"/>
		<copy tofile="@{target.dir}/@{project.name}-@{build.version}.jar" file="@{project.name}.jar"/>
		<zip destfile="@{target.dir}/@{project.name}-@{build.version}.zip" >
			<zipfileset dir="@{target.dir}">
				<include name="@{project.name}-source-@{build.version}.zip"/>
				<include name="@{project.name}-javadocs-@{build.version}.zip"/>
				<include name="@{project.name}-${build.version}.jar"/>
			</zipfileset>
			<zipfileset file="./temp/pdf/${project.name}.pdf"/>
		</zip>
		<checksum algorithm="sha1" file="@{target.dir}/@{project.name}-@{build.version}.zip" property="sha1"/>
		<copy file="packager-template.xml" tofile="@{target.dir}/packager.xml" overwrite="true">
			<filterset>
				<filter token="sha1" value="${sha1}"/>
				<filter token="dist.url" value="${dist.url}"/>
				<filter token="timestamp" value="${timestamp}"/>
				<filter token="ant.project.name" value="${ant.project.name}"/>
				<filter token="project.name" value="${project.name}"/>
			</filterset>
		</copy>
		  <tstamp>
		    <format pattern="yyyyMMddhhmmss" property="timestamp"/>
		  </tstamp>
		<copy file="ivy-template.xml" tofile="@{target.dir}/ivy.xml" overwrite="true">
			<filterset>
				<filter token="sha1" value="${sha1}"/>
				<filter token="dist.url" value="${dist.url}"/>
				<filter token="timestamp" value="${timestamp}"/>
				<filter token="ant.project.name" value="${ant.project.name}"/>
				<filter token="project.name" value="${project.name}"/>
			</filterset>
		</copy>
		<echo>ivyroundup-macro completed</echo>
	</sequential>
	</macrodef>

	<macrodef name="source-macro">
		<attribute name="project.name" default="${ant.project.name}"/>
	<sequential>
		<zip destfile="@{project.name}-source.zip" >
			<zipfileset dir="./src" prefix="src"/>
			<zipfileset dir="./test" prefix="test"/>
			<zipfileset dir="./docs" prefix="docs"/>
		</zip>
	</sequential>
	</macrodef>

	<condition property="repo.dir.set">
		<isset property="repo.dir"/>
	</condition>
	<target name="do_copy_to_repo" if="repo.dir.set">
		<echo>Copying repo files to ${repo.dir}/${ant.project.name}/${build.version}</echo>
		<mkdir dir="${repo.dir}/${ant.project.name}/${build.version}"/>
		<copy overwrite="true" todir="${repo.dir}/${ant.project.name}/${build.version}">
			<fileset file="${basedir}/package/ivy.xml"/>
			<fileset file="${basedir}/package/packager.xml"/>
		</copy>
		<taskdef classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="gcupload">
			  <classpath>
			  	<fileset dir="${basedir}/temp/buildlib" includes="*.jar" />
			  </classpath>
		</taskdef>
		<gcupload 
		        username="${svn.username}" 
		        password="${svn.password}" 
		        projectname="${ant.project.name}" 
		        filename="${basedir}/temp/pdf/${project.name}.pdf" 
		        targetfilename="${project.name}-${build.version}.pdf"
		        summary="Documentation"/>
		<gcupload 
		        username="${svn.username}" 
		        password="${svn.password}" 
		        projectname="${ant.project.name}" 
		        filename="${basedir}/package/${ant.project.name}-${build.version}.zip" 
		        targetfilename="${ant.project.name}-${build.version}.zip"
		        summary="Packaged for ivyroundup and general use "/>
	</target>
	<target name="copy_to_repo" depends="do_copy_to_repo"/>

	<target name="upload-docs" depends="retrieve-dependencies,docs">
		<echo>Uploading ${project.name}-${build.version}.pdf to google</echo>
		<taskdef classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="gcupload">
			  <classpath>
			  	<fileset dir="${basedir}/temp/buildlib" includes="*.jar" />
			  </classpath>
		</taskdef>
		<gcupload 
		        username="${svn.username}" 
		        password="${svn.password}" 
		        projectname="${ant.project.name}" 
		        filename="${basedir}/temp/pdf/${project.name}.pdf" 
		        targetfilename="${project.name}-${build.version}.pdf"
		        summary="Documentation"/>
	</target>

	<target name="compile-distribute-source">
		<updatebuild-macro/>
		<delete dir="${basedir}/bin" failonerror="false"/>
		<mkdir dir="${basedir}/bin"/>
		<javac destdir="${basedir}/bin" debug="off" deprecation="on" target="${javac.compile.target}" srcdir="${srcpath}">
			<classpath>
				<path refid="libs"/>
			</classpath>
		</javac>
		<copy todir="${basedir}/bin" flatten="no" >
			<fileset dir="${basedir}/src" includes="**/*.properties,**/*.xml,**/*.xsd"/>
		</copy>
	</target>

	<target name="compile-test-source">
		<updatebuild-macro/>
		<delete dir="${basedir}/bin" failonerror="false"/>
		<mkdir dir="${basedir}/bin"/>
		<javac destdir="${basedir}/bin" debug="on" deprecation="on" target="${javac.compile.target}" srcdir="${testpath}">
			<classpath>
				<path refid="libs"/>
			</classpath>
		</javac>
		<copy todir="${basedir}/bin" flatten="no" >
			<fileset dir="${basedir}/src" includes="**/*.properties,**/*.xml,**/*.xsd"/>
			<fileset dir="${basedir}/test" includes="**/*.properties,**/*.xml,**/*.html"/>
		</copy>
	</target>

	<target name="junit">
		<junit printsummary="yes" fork="yes" haltonfailure="yes" >
		  <formatter type="plain" />
		  <classpath>
			<pathelement location="${basedir}/bin"/>
			<fileset dir="${basedir}/temp/lib">
		      	<include name="*.jar"/>
		    </fileset>
		  </classpath>
		  <test name="${junit.class}" />
		</junit>
	</target>

	<target name="jar-meta-inf" depends="compile-distribute-source">
		<manifest-macro/>
		<jar jarfile="${ant.project.name}.jar" index="true" manifest="MANIFEST.MF">
			<metainf dir="${basedir}/meta-inf">
				<include name="spring.*"/>
				<include name="services/*.*"/>
			</metainf>
			<fileset dir="${basedir}/bin">
				<exclude name="**/tests/**"/>
				<exclude name="**/package.html"/>
			</fileset>
			<fileset file="${basedir}/${ant.project.name}.properties"/>
			<fileset file="${basedir}/LICENSE-2.0.html"/>
		</jar>
	</target>
	
	<target name="jar" depends="compile-distribute-source">
		<manifest-macro/>
		<jar jarfile="${ant.project.name}.jar" index="true" manifest="MANIFEST.MF">
			<fileset dir="${basedir}/bin">
				<exclude name="**/tests/**"/>
				<exclude name="**/package.html"/>
			</fileset>
			<fileset file="${basedir}/${ant.project.name}.properties"/>
			<fileset file="${basedir}/LICENSE-2.0.html"/>
		</jar>
	</target>
	
	<target name="docs">
		<ant antfile="${basedir}/temp/doclib/build-pdf.xml" dir="${basedir}/docs/" target="build_pdf" inheritall="true">
			<property name="build.name" value="${ant.project.name}"/>
			<property name="build.company" value="${build.company}"/>
			<property name="doclib" value="${basedir}/temp/doclib"/>
			<property name="docdir" value="${basedir}/docs"/>
			<property name="docpdf" value="${basedir}/temp/pdf"/>
			<property name="docworking" value="${basedir}/temp/working"/>
			<property name="build.number" value="${build.version}"/>
			<property name="Year" value="${year}"/>
		</ant>			
	</target>

	<target name="do_retrieve-dependencies" depends="clean,init-ivy">
		<ivy:retrieve conf="default" pattern="${basedir}/temp/lib/[artifact]-[revision].[ext]" />
		<ivy:retrieve conf="test" pattern="${basedir}/temp/lib/[artifact]-[revision].[ext]" />
		<ivy:retrieve conf="docs" pattern="${basedir}/temp/doclib/[artifact].[ext]" />
		<ivy:retrieve conf="build" pattern="${basedir}/temp/buildlib/[artifact].[ext]" />
	</target>

	<target name="retrieve-dependencies" unless="suppress.retrieve-dependencies-true">
		<antcall target="do_retrieve-dependencies"/>
	</target>

	<target name="clean">
		<delete file="${ant.project.name}.jar" failonerror="false"/>
		<delete dir="${basedir}/bin" failonerror="false"/>
		<mkdir dir="${basedir}/bin"/>
		<delete failonerror="false" dir="${basedir}/temp"/>
		<mkdir dir="${basedir}/temp/lib"/>
		<mkdir dir="${basedir}/temp/doclib"/>
		<mkdir dir="${basedir}/temp/buildlib"/>
		<mkdir dir="${basedir}/temp/pdf"/>
		<mkdir dir="${basedir}/temp/working"/>
	</target>

</project>